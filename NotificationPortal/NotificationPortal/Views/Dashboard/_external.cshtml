@model IEnumerable<NotificationPortal.ViewModels.DashboardVM>
@using System.Text.RegularExpressions

@if (Model != null)
{
    if (Model.Count() > 0)
    {
        foreach (var item in Model)
        {
            //var statusClass = item.Status == NotificationPortal.Models.Key.STATUS_NOTIFICATION_INCOMPLETE ? "text-muted" : "text-muted";
            var impactClass = item.LevelOfImpact == NotificationPortal.Models.Key.LEVEL_OF_IMPACT_NON_IMPACTING ? "badge badge-success" : "badge badge-danger";
        <div class="card-deck pb-3">
            <div class="card">
                <div class="card-header card-inverse card-deck">
                        <div class="col-md-6 pl-0">
                                <h5>
                                    <a href="@Url.Action("DetailsThread", "Notification", new { id = item.ThreadID })">
                                        @Html.DisplayFor(modelItem => item.ThreadHeading)
                                    </a>
                                </h5>
                        </div>
                        <div class="col-md-6 pr-4">
                            <span class="float-right external-status @impactClass">
                                    @Html.DisplayFor(modelItem => item.LevelOfImpact)
                            </span>
                        </div>
                </div>
                <div class="card-block clickable-row-dashboard" data-href="/Notification/DetailsThread/@item.ThreadID">
                    <div class="col-md-12">
                            <div class="row">
                                <h3 class="heading-padding text-coral">
                                    Application: @Html.DisplayFor(modelItem => item.AppName)
                                </h3>
                            </div>

                        <div class="col-md-12">
                            <div class="row">
                                <div class="col-md-12">
                                    <ul>
                                        @{
                                            var listItemNum = 0;
                                            foreach (var detail in item.ThreadDetail)
                                            {
                                                listItemNum++;
                                                var padding = listItemNum * 10 + "px";
                                                <li class="notification-list">
                                                    <p class="text-muted">
                                                        <i class="fa fa-sticky-note-o" aria-hidden="true"></i>
                                                        <span class="text-indent">
                                                            @Html.DisplayFor(modelItem => detail.NotificationDetail)
                                                        </span>
                                                        <span class="float-right">
                                                            @Html.DisplayFor(modelItem => detail.SentDateTime)
                                                        </span>
                                                    </p>
                                                </li>
                                            }
                                        }
                                    </ul>
                                </div>
                                <div class="col-md-12">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        }
    }
    else
    {
        <p>Currently, there are not notifications.</p>
    }
}
else
{
    <p>Currently, there are not notifications.</p>
}