@model NotificationPortal.ViewModels.DashboardIndexVM
@using PagedList.Mvc;

@{
    ViewBag.Title = "Dashboard";
}

<h1 class="display-4 text-center">@ViewBag.Title</h1>
@if (TempData["SuccessMsg"] != null)
{
            <!-- display success message -->
    <p class="alert alert-success alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["SuccessMsg"])
    </p>
}
@if (TempData["ErrorMsg"] != null)
{
            <!-- display error message -->
    <p class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["ErrorMsg"])
    </p>
}
@if (HttpContext.Current.User.IsInRole(NotificationPortal.Models.Key.ROLE_USER) || HttpContext.Current.User.IsInRole(NotificationPortal.Models.Key.ROLE_CLIENT))
{
    if (Model!=null)
    {
       @Html.Partial("~/Views/Dashboard/_external.cshtml", Model.Notifications)
    }
    else
    {
        <p class="text-center">There are no open notifications</p>
    }
}
else
{
    <div class="row">
        <div class="form-inline col-sm-8 col-xs-12 pb-3">
            <input class="form-control mr-sm-2" id="SearchString" name="SearchString" onkeyup="getNewList()" placeholder="Search" type="text" value="">
            <span class="hidden-sm-up">
                <button onclick="getNewList()" id="hidden-search">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
            </span>
            <span class="hidden-xs-down">
                <input onclick="getNewList()" class="btn btn-secondary" type="submit" value="Search" />
            </span>
            <i id="preloader" class="fa fa-spinner fa-spin" style="font-size:24px"></i>
        </div>
    </div>

    <table class="table table-bordered">
        @{
            var filterById = "";
            var filterBySubject = "";
            var filterByImpact = "";
            var filterByDate = "";
            var filterBySender = "";
            const string ID_FILTER = "id";
            const string HEADING_FILTER = "heading";
            const string IMPACT_FILTER = "impact";
            const string DATE_FILTER = "date";
            const string SENDER_FILTER = "sender";
            if (Model.CurrentSort != null)
            {
                filterById = Model.CurrentSort.Contains(ID_FILTER) ? "bg-mint" : "";
                filterBySubject = Model.CurrentSort.Contains(HEADING_FILTER) ? "bg-mint" : "";
                filterByImpact = Model.CurrentSort.Contains(IMPACT_FILTER) ? "bg-mint" : "";
                filterByDate = Model.CurrentSort.Contains(DATE_FILTER) ? "bg-mint" : "";
                filterBySender = Model.CurrentSort.Contains(SENDER_FILTER) ? "bg-mint" : "";
            }
        }
        <thead id="thead">
            <tr class="bg-inverse text-white">
                <th>
                    <a href="javascript:void(0)" onclick="sort('@Model.IDSort')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().ThreadID)</a>
                </th>
                <th>
                    <a href="javascript:void(0)" onclick="sort('@Model.SubjectSort')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().ThreadHeading)</a>
                </th>
                <th>
                    <a href="javascript:void(0)" onclick="sort('@Model.DateSort')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().SentDateTime)</a>
                </th>
                <th>
                    <a href="javascript:void(0)" onclick="sort('@Model.SenderSort')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().SenderName)</a>
                </th>
                <th>
                    <a href="javascript:void(0)" onclick="sort('@Model.LevelOfImpactSort')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().LevelOfImpact)</a>
                </th>
            </tr>
        </thead>
        <tbody id="tbody"></tbody>
    </table>

    <div class="pagination-container">
        <ul id="pagination" class="pagination"></ul>
    </div>

    <div class="pageinfo-display">
        <select id="ItemsPerPage" class="form-control float-left custom-select-sm mb-2 mr-sm-2 mb-sm-0">
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
        <label class="float-left" for="inlineFormCustomSelect">Items per page</label>
        <p id="pageinfo-display" class="float-left"></p>
    </div>
    <script>
    // defining page specific functions (refillTHead, addRow, getNewList, filterDropDown)
    var waiting = false;
    var refillTHead = function (model) {
        $('#thead').replaceWith('<thead id="thead" />');
        var theadRow = $('<tr class="bg-inverse text-white">').appendTo($('#thead'));

        var arrows = "";

        var incidentNumberArrows = arrows;
        var levelOfImpactArrows = arrows;
        var notificationHeadingArrows = arrows;
        var dateArrows = arrows;
        var senderArrows = arrows;

        switch (currentSort) {
            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_LEVEL_OF_IMPACT_DESC':
                levelOfImpactArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_LEVEL_OF_IMPACT_ASCE':
                levelOfImpactArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_HEADING_ASCE':
                notificationHeadingArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_HEADING_DESC':
                notificationHeadingArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_ID_ASCE':
                incidentNumberArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_ID_DESC':
                incidentNumberArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_DATE_ASCE':
                dateArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_DATE_DESC':
                dateArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_SENDER_ASCE':
                senderArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_SENDER_DESC':
                senderArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            default:
                levelOfImpactArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;
        }
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.IDSort + "'" + ')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().ThreadID)' + incidentNumberArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.SubjectSort + "'" + ')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().ThreadHeading)' + notificationHeadingArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.DateSort + "'" + ')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().SentDateTime)' + dateArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.SenderSort + "'" + ')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().SenderName)' + senderArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.LevelOfImpactSort + "'" + ')">@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().LevelOfImpact)' + levelOfImpactArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
    };

        var addRow = function (model) {
            var date = new Date(model.SentDateTime);
        var formattedDate = date.getUTCFullYear() + "/" + (date.getUTCMonth() + 1) + "/" + date.getUTCDate()
            + " " + (date.getUTCHours()%12) + ":" + date.getUTCMinutes() + (date.getUTCHours() >= 12 ? 'PM' : 'AM');
        $('<tr class="clickable-row" id="' + model.IncidentNumber + '" data-href="Notification/DetailsThread/' + model.IncidentNumber + '"/>').appendTo($('#tbody'));
        $('<td/>', { text: model.IncidentNumber }).addClass('first-row').attr('data-title','@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().ThreadID)').appendTo($('#' + model.IncidentNumber));
        $('<td/>', { text: model.ThreadHeading }).attr('data-title','@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().ThreadHeading)').appendTo($('#' + model.IncidentNumber));
        $('<td/>', { text: formattedDate }).attr('data-title','@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().SentDateTime)').appendTo($('#' + model.IncidentNumber));
        $('<td/>', { text: model.SenderName }).attr('data-title', '@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().SenderName)').appendTo($('#' + model.IncidentNumber));
        switch (model.LevelOfImpact) {
            case '@NotificationPortal.Models.Key.LEVEL_OF_IMPACT_IMPACTING':
                $('<td/>', { text: model.LevelOfImpact }).appendTo($('#' + model.IncidentNumber)).addClass('bg-impact td-status text-white').attr('data-title','@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().LevelOfImpact)').appendTo($('#' + model.IncidentNumber));
                break;
            case '@NotificationPortal.Models.Key.LEVEL_OF_IMPACT_OUTAGE':
                $('<td/>', { text: model.LevelOfImpact }).appendTo($('#' + model.IncidentNumber)).addClass('bg-danger td-status text-white').attr('data-title','@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().LevelOfImpact)').appendTo($('#' + model.IncidentNumber));
                break;
            case '@NotificationPortal.Models.Key.LEVEL_OF_IMPACT_REDUNDANCY':
                $('<td/>', { text: model.LevelOfImpact }).appendTo($('#' + model.IncidentNumber)).addClass('bg-invest td-status text-white').attr('data-title','@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().LevelOfImpact)').appendTo($('#' + model.IncidentNumber));
                break;
            case '@NotificationPortal.Models.Key.LEVEL_OF_IMPACT_NON_IMPACTING':
                $('<td/>', { text: model.LevelOfImpact }).appendTo($('#' + model.IncidentNumber)).addClass('bg-success td-status text-white').attr('data-title','@Html.DisplayNameFor(model => Model.Notifications.FirstOrDefault().LevelOfImpact)').appendTo($('#' + model.IncidentNumber));
                break;
            default:
                break;
        }
    }

    var getNewList = function (isPageChange) {
        if (!waiting) {
            waiting = true;
            $('#preloader').show();

            var newData = {
                CurrentFilter: "",
                CurrentSort: currentSort,
                SearchString: $('#SearchString').val().toLowerCase(),
                Page: isPageChange ? pageNumber : 1,
                ItemsPerPage: $('#ItemsPerPage').val()
            };

            $.ajax({
                type: "POST",
                dataType: "json",
                url: domain+"api/Dashboard",
                data: JSON.stringify(newData),
                contentType: 'application/json',
                success: function (data) {
                    refillTHead(data);
                    refillTBody(data.Threads);
                    refillPagination(data);
                    waiting = false;
                    $('#preloader').hide();
                },
                error: function (error) {
                    jsonValue = jQuery.parseJSON(error.responseText);
                    alert("error" + error.responseText);
                    waiting = false;
                    $('#preloader').hide();
                }
            });
        }
    }

    $(document).ready(function () {
        // initialize list
        getNewList();
        // observe change in ItemsPerPage
        $('#ItemsPerPage').change(function () {
            getNewList();
        });
    });
</script>
<script src="~/Scripts/Custom/refresh-index-helper.js" type="text/javascript"></script>
                }
