@model NotificationPortal.ViewModels.ServerDetailVM

@{
    ViewBag.Title = "Details";
}

@{
    var className = Model.Status == NotificationPortal.Models.Key.STATUS_SERVER_OFFLINE ? "badge badge-danger" : "badge badge-success";
}

<h1 class="text-center display-4 pb-3">@Model.ServerName <span class="@className">@Html.DisplayFor(modelItem => Model.Status)</span></h1>

<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item"><a href="~/Server/Index" class="link-color">Servers</a></li>
    <li class="breadcrumb-item active">@Html.DisplayFor(model => model.ServerName)</li>
</ol>

<!-- Nav tabs -->
<ul class="nav nav-tabs" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" data-toggle="tab" href="#Servers" role="tab">Servers</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#Applications" role="tab">Applications</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#Notifications" role="tab">Notifications</a>
    </li>
</ul>
@if (TempData["SuccessMsg"] != null)
{
            <!-- display success message -->
    <p class="alert alert-success alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["SuccessMsg"])
    </p>
}
@if (TempData["ErrorMsg"] != null)
{
            <!-- display error message -->
    <p class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["ErrorMsg"])
    </p>
}
<!-- Tab panes -->
<div class="tab-content">
    <div class="tab-pane active" id="Servers" role="tabpanel">
        <dl class="row">
            @if (Model.ReferenceID != null)
            {
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.ServerName)
                </dt>

                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.ServerName)
                </dd>

                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.Description)
                </dt>

                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Description)
                </dd>

                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.Location)
                </dt>

                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Location)
                </dd>

                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.ServerType)
                </dt>

                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.ServerType)
                </dd>

                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.Status)
                </dt>

                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Status)
                </dd>
            }
            else
            {
                <p>Could not get the information at this time.</p>
            }
        </dl>
    </div>
    <div class="tab-pane" id="Applications" role="tabpanel">
        @{
            if (Model.Applications.Any())
            {
                <table class="table table-bordered">
                    @{ var applicationModel = Model.Applications.FirstOrDefault();}
                    <thead>
                        <tr class="bg-inverse text-white">
                            <th>
                                @Html.DisplayNameFor(model => applicationModel.ApplicationName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => applicationModel.Status)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => applicationModel.Description)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => applicationModel.URL)
                            </th>
                        </tr>
                    </thead>
                    <tbody>

                @foreach (var item in Model.Applications)
                {
                    var statusClass = item.Status.ToUpper() == NotificationPortal.Models.Key.STATUS_APPLICATION_OFFLINE.ToUpper() ? "badge badge-danger" : "badge badge-success";

                    <tr class="clickable-row" id="@item.ApplicationReferenceID" data-href="Application/Details/@item.ApplicationReferenceID">
                        <td data-title="@Html.DisplayNameFor(model => item.ApplicationName)" class="first-row">
                            @Html.DisplayFor(modelItem => item.ApplicationName)
                        </td>
                        <td data-title="@Html.DisplayNameFor(model => item.Description)">
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td data-title="@Html.DisplayNameFor(model => item.URL)">
                            @Html.DisplayFor(modelItem => item.URL)
                        </td>
                        <td data-title="@Html.DisplayNameFor(model => item.Status)">
                            <span class="@statusClass">@Html.DisplayFor(modelItem => item.Status)</span>
                        </td>
                    </tr>
                }
                    </tbody>
                </table>
            }
            else
            {
                <p>This server is not associated with any applications.</p>
            }
    }
    </div>
    <div class="tab-pane" id="Notifications" role="tabpanel">
        @{
            if (Model.Threads.Any())
            {
                <table class="table table-bordered">
                    @{ var serverModel = Model.Threads.FirstOrDefault();}
                    <thead>
                        <tr class="bg-inverse text-white">
                            <th>
                                @Html.DisplayNameFor(model => serverModel.ThreadType)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => serverModel.LevelOfImpact)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => serverModel.ThreadHeading)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => serverModel.ThreadStatus)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                @foreach (var item in Model.Threads)
                {
                    var notificationStatus = "";
                    switch (item.ThreadStatus)
                    {
                        case NotificationPortal.Models.Key.STATUS_NOTIFICATION_CLOSED:
                            notificationStatus = "bg-closed";
                            break;
                        case NotificationPortal.Models.Key.STATUS_NOTIFICATION_OPEN:
                            notificationStatus = "bg-danger";
                            break;
                        case NotificationPortal.Models.Key.STATUS_NOTIFICATION_INVESTIGATING:
                            notificationStatus = "bg-invest";
                            break;
                        case NotificationPortal.Models.Key.STATUS_NOTIFICATION_RESOLVED:
                            notificationStatus = "bg-success";
                            break;
                        default:
                            notificationStatus = "badge badge-grey";
                            break;
                    }
                    <tr class="clickable-row" id="@item.ThreadID" data-href="Notification/DetailsThread/@item.ThreadID">
                        <td data-title="@Html.DisplayNameFor(model => item.ThreadType)" class="first-row">
                            @Html.DisplayFor(modelItem => item.ThreadType)
                        </td>
                        <td data-title="@Html.DisplayNameFor(model => item.LevelOfImpact)">
                            @Html.DisplayFor(modelItem => item.LevelOfImpact)
                        </td>
                        <td data-title="@Html.DisplayNameFor(model => item.ThreadHeading)">
                            @Html.DisplayFor(modelItem => item.ThreadHeading)
                        </td>
                        <td data-title="@Html.DisplayNameFor(model => item.ThreadStatus)" class="@notificationStatus">
                            @Html.DisplayFor(modelItem => item.ThreadStatus)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        }
        else
        {
            <p>This server is not associated with any notifications.</p>
        }
    }

</div>
</div>

@Html.ActionLink("Edit", "Edit", new { id = Model.ReferenceID }, new { @class = "btn btn-success" })
@Html.ActionLink("Back", "Index", null, new { @class = "btn btn-danger" })
