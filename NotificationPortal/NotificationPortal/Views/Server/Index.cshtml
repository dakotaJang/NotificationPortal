
@model NotificationPortal.ViewModels.ServerIndexVM
@using PagedList.Mvc;
@{
    ViewBag.Title = "Servers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="text-center display-4 pb-3">@ViewBag.Title</h1>


<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item active">@ViewBag.Title</li>
</ol>

<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm("Index", "Server", FormMethod.Get, new { @class = "form-inline pb-3" }))
        {
            @Html.TextBox("SearchString", Model.CurrentFilter, new { @class = "form-control mr-sm-2" })
            <input class="btn btn-secondary" type="submit" value="Search" />
        }
    </div>
@if (Request.IsAuthenticated && User.IsInRole("Admin") || (Request.IsAuthenticated && User.IsInRole("Staff")))
{
    <div class="offset-md-4 col-md-2">
        <div class="float-create">
            @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-mint text-white" })
        </div>
    </div>
}
</div>

@if (Model.Servers.Count() > 0)
{
    if (TempData["SuccessMsg"] != null)
    {
        <p class="alert alert-success">
            @Html.Raw(TempData["SuccessMsg"])
        </p>
    }

    <table class="table table-bordered" style="position:relative;">
        <tr class="bg-inverse text-white">
            <th>
                <a href="@Url.Action("Index", "Server", new { sortOrder = Model.ServerSort, currentFilter = Model.CurrentFilter })">
                    Server
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up" aria-hidden="true"></i>
                        <i class="fa fa-caret-down" aria-hidden="true"></i>
                    </span>
                </a>
            </th>
            <th>
                <a href="@Url.Action("Index", "Server", new { sortOrder = Model.DescriptionSort, currentFilter = Model.CurrentFilter })">
                    Description
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up" aria-hidden="true"></i>
                        <i class="fa fa-caret-down" aria-hidden="true"></i>
                    </span>
                </a>
            </th>
            <th>
                <a href="@Url.Action("Index", "Server", new { sortOrder = Model.LocationSort, currentFilter = Model.CurrentFilter })">
                    Location
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up" aria-hidden="true"></i>
                        <i class="fa fa-caret-down" aria-hidden="true"></i>
                    </span>
                </a>
            </th>
            <th>
                <a href="@Url.Action("Index", "Server", new { sortOrder = Model.StatusSort, currentFilter = Model.CurrentFilter })">
                    Status
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up" aria-hidden="true"></i>
                        <i class="fa fa-caret-down" aria-hidden="true"></i>
                    </span>
                </a>
            </th>

            <th>
                <a href="@Url.Action("Index", "Server", new { sortOrder = Model.ServerTypeSort, currentFilter = Model.CurrentFilter })">
                    Server Type
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up" aria-hidden="true"></i>
                        <i class="fa fa-caret-down" aria-hidden="true"></i>
                    </span>
                </a>
            </th>
        </tr>

        @foreach (var item in Model.Servers)
        {
            //var statusClass = item.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_ENABLED.ToUpper() ? "<i class='fa fa-check text-success' aria-hidden='true'></i>" : "<i class='fa fa-times text-danger' aria-hidden='true'></i>";
            <tr class="clickable-row" id="@item.ReferenceID" data-href="Server/Details/@item.ReferenceID">
                <td>
                    @Html.DisplayFor(modelItem => item.ServerName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LocationName)
                </td>
                @{
                    var className = item.StatusName == "Offline" ? "badge badge-danger" : "badge badge-success";
                }
                <td>
                    @*<span>@Html.Raw(statusClass)</span>*@
                    <span class="@className">@Html.DisplayFor(modelItem => item.StatusName)</span>
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.ServerTypeName)
                </td>
            </tr>
        }
    </table>

    @Html.PagedListPager(Model.Servers, page => Url.Action("Index",
        new { page, sortOrder = Model.CurrentSort, currentFilter = Model.CurrentFilter }))
}
else
{
    if (Model == null)
    {
        <p> Something went wrong, server database not available.</p>
    }
    else
    {
        <p> There are no such servers in the database at the moment.</p>
    }

}

    <div class="hidden-menu">
        <ul>
            <li><a href="Server/Edit/" class="btn btn-sm">Edit</a></li>
            <li><a href="Server/Delete/" class="btn btn-sm">Delete</a></li>
        </ul>
    </div>
