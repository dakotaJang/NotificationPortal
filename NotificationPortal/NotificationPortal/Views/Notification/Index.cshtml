@model NotificationPortal.ViewModels.NotificationIndexVM
@using PagedList.Mvc;

@{
    ViewBag.Title = "Notifications";
}

<h1 class="display-4 text-center pb-3">@ViewBag.Title</h1>

<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item active">Notifications</li>
</ol>

@if (TempData["SuccessMsg"] != null)
{
    <p class="alert alert-success">
        @Html.Raw(TempData["SuccessMsg"])
    </p>
}

    <div class="row filter-row">
        <!--notification type-->
        <div>
            @Html.ListBoxFor(m => m.NotificationTypeIDs, Model.NotificationTypeList, new { style = "display: none;" })
        </div>
        <!--level of impact-->
        <div>
            @Html.ListBoxFor(m => m.LevelOfImpactIDs, Model.LevelOfImpactList, new { style = "display: none;" })
        </div>
        <!--notification status-->
        <div>
            @Html.ListBoxFor(m => m.StatusIDs, Model.StatusList, new { style = "display: none;" })
        </div>
        <!--priority list-->
        <div>
            @Html.ListBoxFor(m => m.PriorityIDs, Model.PriorityList, new { style = "display: none;" })
        </div>
    </div>
    <div class="row">
        <div class="form-inline col-sm-8 col-xs-12 pb-3">
            @Html.TextBoxFor(model => model.SearchString, Model.CurrentFilter, new { @class = "form-control mr-sm-2", placeholder = "Search", onkeypress = "search(event)" })
            <span class="hidden-sm-up">
                <button onclick="getNewList()" id="hidden-search">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
            </span>
            <span class="hidden-xs-down">
                <input onclick="getNewList()" class="btn btn-secondary" type="submit" value="Search" />
            </span>
            <i id="preloader" class="fa fa-spinner fa-spin" style="font-size:24px"></i>
        </div>
        @if (User.IsInRole(NotificationPortal.Models.Key.ROLE_ADMIN) ||
                             User.IsInRole(NotificationPortal.Models.Key.ROLE_STAFF))
        {
            <div class="offset-sm-2 col-sm-2 col-xs-12">
                <div class="float-create">
                    @Html.ActionLink("Create New", "CreateThread", null, new { @class = "btn btn-mint text-white" })
                </div>
            </div>
        }
    </div>


<table class="table table-bordered">
    <thead id="thead">
        <tr class="bg-inverse text-white">
            <th>
                <a href="javascript:void(0)" onclick="sort('@Model.IncidentNumberSort')">@Html.DisplayNameFor(model => Model.IncidentNumber)</a>
            </th>
            <th>
                <a href="javascript:void(0)" onclick="sort('@Model.NotificationTypeSort')">@Html.DisplayNameFor(model => Model.NotificationType)</a>
            </th>
            <th>
                <a href="javascript:void(0)" onclick="sort('@Model.LevelOfImpactSort')">@Html.DisplayNameFor(model => Model.LevelOfImpact)</a>
            </th>
            <th>
                <a href="javascript:void(0)" onclick="sort('@Model.NotificationHeadingSort')">@Html.DisplayNameFor(model => Model.NotificationHeading)</a>
            </th>
            <th>
                <a href="javascript:void(0)" onclick="sort('@Model.PrioritySort')">@Html.DisplayNameFor(model => Model.Priority)</a>
            </th>
            <th>
                <a href="javascript:void(0)" onclick="sort('@Model.StatusSort')">@Html.DisplayNameFor(model => Model.Status)</a>
            </th>
        </tr>
    </thead>
    <tbody id="tbody">
        <tr>
            <td id="no-threads" colspan="6">There are no notifications at the moment.</td>
        </tr>
    </tbody>
</table>

<div class="pagination-container">
    <ul id="pagination" class="pagination"></ul>
</div>

<div class="pageinfo-display">
    <select id="ItemsPerPage" class="form-control float-left custom-select-sm mb-2 mr-sm-2 mb-sm-0">
        <option value="10">10</option>
        <option value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
    </select>
    <label class="float-left" for="inlineFormCustomSelect">Items per page</label>
    <p id="pageinfo-display" class="float-left"></p>
</div>

<div class="hidden-menu">
    <ul>
        <li><a href="Notification/Create/" class="btn btn-sm">Update</a></li>
        <li><a href="Notification/DeleteThread/" class="btn btn-sm">Delete</a></li>
    </ul>
</div>

<script>
    // defining page specific functions (refillTHead, addRow, getNewList, filterDropDown)
    var waiting = false;
    var refillTHead = function (model) {
        $('#thead').replaceWith('<thead id="thead" />');
        var theadRow = $('<tr class="bg-inverse text-white">').appendTo($('#thead'));

        var arrows = "";

        var incidentNumberArrows = arrows;
        var notificationTypeArrows = arrows;
        var notificationHeadingArrows = arrows;
        var levelOfImpactArrows = arrows;
        var statusArrows = arrows;
        var priorityArrows = arrows;

        switch (currentSort) {
            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_INCIDENT_NUMBER_ASCE':
                incidentNumberArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_INCIDENT_NUMBER_DESC':
                incidentNumberArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_LEVEL_OF_IMPACT_ASCE':
                levelOfImpactArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_HEADING_ASCE':
                notificationHeadingArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_HEADING_DESC':
                notificationHeadingArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_TYPE_ASCE':
                notificationTypeArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_TYPE_DESC':
                notificationTypeArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_PRIORITY_ASCE':
                priorityArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_NOTIFICATION_BY_PRIORITY_DESC':
                priorityArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_ASCE':
                statusArrows = '<span class="filter-arrows"><i class="fa fa-caret-up active-arrow" aria-hidden="true"></i></i></span>';
                break;

            case '@NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_DESC':
                statusArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;

            default:
                levelOfImpactArrows = '<span class="filter-arrows"><i class="fa fa-caret-down active-arrow" aria-hidden="true"></i></span>';
                break;
        }
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.IncidentNumberSort + "'" + ')">@Html.DisplayNameFor(model => Model.IncidentNumber)' + incidentNumberArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.NotificationTypeSort + "'" + ')">@Html.DisplayNameFor(model => Model.NotificationType)' + notificationTypeArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.LevelOfImpactSort + "'" + ')">@Html.DisplayNameFor(model => Model.LevelOfImpact)' + levelOfImpactArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.NotificationHeadingSort + "'" + ')">@Html.DisplayNameFor(model => Model.NotificationHeading)' + notificationHeadingArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.PrioritySort + "'" + ')">@Html.DisplayNameFor(model => Model.Priority)' + priorityArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
        $('<a href="javascript:void(0)" onclick="sort(' + "'" + model.StatusSort + "'" + ')">@Html.DisplayNameFor(model => Model.Status)' + statusArrows + '</a>').appendTo($('<th/>', { text: model.IncidentNumber }).appendTo(theadRow));
    };

    var addRow = function (model) {
        $('<tr class="clickable-row" id="' + model.IncidentNumber + '" data-href="Notification/DetailsThread/' + model.IncidentNumber + '"/>').appendTo($('#tbody'));
        $('<td/>', { text: model.IncidentNumber }).addClass('first-row').attr('data-title','@Html.DisplayNameFor(model => Model.IncidentNumber)').appendTo($('#' + model.IncidentNumber));
        $('<td/>', { text: model.NotificationType }).attr('data-title','@Html.DisplayNameFor(model => Model.NotificationType)').appendTo($('#' + model.IncidentNumber));
        $('<td/>', { text: model.LevelOfImpact }).attr('data-title','@Html.DisplayNameFor(model => Model.LevelOfImpact)').appendTo($('#' + model.IncidentNumber));
        $('<td/>', { text: model.NotificationHeading }).attr('data-title','@Html.DisplayNameFor(model => Model.NotificationHeading)').appendTo($('#' + model.IncidentNumber));
        $('<td/>', { text: model.Priority }).attr('data-title','@Html.DisplayNameFor(model => Model.Priority)').appendTo($('#' + model.IncidentNumber));
        switch (model.Status) {
            case '@NotificationPortal.Models.Key.STATUS_NOTIFICATION_OPEN':
                $('<td/>', { text: model.Status }).appendTo($('#' + model.IncidentNumber)).addClass('bg-danger td-status text-white').attr('data-title','@Html.DisplayNameFor(model => Model.Status)');
                break;
            case '@NotificationPortal.Models.Key.STATUS_NOTIFICATION_CLOSED':
                $('<td/>', { text: model.Status }).appendTo($('#' + model.IncidentNumber)).addClass('bg-closed td-status text-white').attr('data-title','@Html.DisplayNameFor(model => Model.Status)');
                break;
            case '@NotificationPortal.Models.Key.STATUS_NOTIFICATION_INVESTIGATING':
                $('<td/>', { text: model.Status }).appendTo($('#' + model.IncidentNumber)).addClass('bg-invest td-status text-white').attr('data-title','@Html.DisplayNameFor(model => Model.Status)');
                break;
            case '@NotificationPortal.Models.Key.STATUS_NOTIFICATION_RESOLVED':
                $('<td/>', { text: model.Status }).appendTo($('#' + model.IncidentNumber)).addClass('bg-success td-status text-white').attr('data-title','@Html.DisplayNameFor(model => Model.Status)');
                break;
            default:
                break;
        }
    }

    var filterDropDown = function () {
        $('#NotificationTypeIDs').multiselect({
            includeSelectAllOption: true,
            buttonText: function (options, select) {
                return 'Type (' + options.length + ')';
            }
        });
        $('#LevelOfImpactIDs').multiselect({
            includeSelectAllOption: true,
            buttonText: function (options, select) {
                return 'Level of Impact (' + options.length + ')';
            }
        });
        $('#StatusIDs').multiselect({
            includeSelectAllOption: true,
            buttonText: function (options, select) {
                return 'Status (' + options.length + ')';
            }
        });
        $('#PriorityIDs').multiselect({
            includeSelectAllOption: true,
            buttonText: function (options, select) {
                return 'Priority (' + options.length + ')';
            }
        });

        $('#NotificationTypeIDs').change(function () {
            getNewList();
        });
        $('#LevelOfImpactIDs').change(function () {
            getNewList();
        });
        $('#StatusIDs').change(function () {
            getNewList();
        });
        $('#PriorityIDs').change(function () {
            getNewList();
        });
    }

    var getNewList = function (isPageChange) {
        if (!waiting) {
            waiting = true;
            $('#preloader').show();

            var newData = {
                NotificationTypeIDs: $('#NotificationTypeIDs').val(),
                LevelOfImpactIDs: $('#LevelOfImpactIDs').val(),
                StatusIDs: $('#StatusIDs').val(),
                PriorityIDs: $('#PriorityIDs').val(),
                CurrentFilter: "",
                CurrentSort: currentSort,
                SearchString: $('#SearchString').val().toLowerCase(),
                Page: isPageChange ? pageNumber : 1,
                ItemsPerPage: $('#ItemsPerPage').val()
            };

            $.ajax({
                type: "POST",
                dataType: "json",
                url: domain+"api/Notification",
                data: JSON.stringify(newData),
                contentType: 'application/json',
                success: function (data) {
                    refillTHead(data);
                    refillTBody(data.Threads);
                    refillPagination(data);
                    waiting = false;
                    $('#preloader').hide();
                },
                error: function (error) {
                    jsonValue = jQuery.parseJSON(error.responseText);
                    alert("error" + error.responseText);
                    waiting = false;
                    $('#preloader').hide();
                }
            });
        }
    }

    $(document).ready(function () {
        // initialize list
        getNewList();
        // create dropdowns for filter
        filterDropDown();
        // observe change in ItemsPerPage
        $('#ItemsPerPage').change(function () {
            getNewList();
        });
    });
</script>
<script src="~/Scripts/ajax-helper.js" type="text/javascript"></script>