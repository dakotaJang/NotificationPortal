@model NotificationPortal.ViewModels.StatusIndexVM
@using PagedList.Mvc;

@{
    ViewBag.Title = "Statuses";
}

<h1 class="text-center display-4 pb-3">@ViewBag.Title</h1>
<!-- ========================= breadcrumb ========================= -->
<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item active">@ViewBag.Title</li>
</ol>
<!-- ========================= search & create ========================= -->
<div class="row">
    <div class="form-inline col-sm-8 col-xs-12 pb-3">
        @using (Html.BeginForm("Index", "Status", FormMethod.Get, new { @class = "form-inline search pb-3" }))
        {
            @Html.TextBox("SearchString", Model.CurrentFilter, new { @class = "form-control mr-sm-2" })
            <span class="hidden-xs-down">
                <input class="btn btn-secondary" type="submit" value="Search" />
            </span>
            <span class="hidden-sm-up">
                <button id="hidden-search">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
            </span>
        }
    </div>
    <div class="offset-sm-2 col-sm-2 col-xs-12">
        <div class="float-create">
            @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-mint text-white" })
        </div>
    </div>
</div>
@if (TempData["SuccessMsg"] != null)
{
            <!-- display success message -->
    <p class="alert alert-success alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["SuccessMsg"])
    </p>
}
@if (TempData["ErrorMsg"] != null)
{
            <!-- display error message -->
    <p class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["ErrorMsg"])
    </p>
}
<!-- ========================= status table ========================= -->
@if (Model.Statuses.Count() > 0)
{
<table class="table table-bordered">
    @{
        var filterByStatusNameAsce = "";
        var filterByStatusNameDesc = "";
        var filterByStatusTypeAsce = "";
        var filterByStatusTypeDesc = "";
        if (Model.CurrentSort != null)
        {
            <!-- class for the arrows:active or disabled -->
            filterByStatusNameAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_ASCE) ? "active-arrow" : "disabled-arrow";
            filterByStatusNameDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_DESC) ? "active-arrow" : "disabled-arrow";
            filterByStatusTypeAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_TYPE_ASCE) ? "active-arrow" : "disabled-arrow";
            filterByStatusTypeDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_TYPE_DESC) ? "active-arrow" : "disabled-arrow";
        }
    }
    <thead>
        <tr class="bg-inverse text-white">
            <th>
                <a href="@Url.Action("Index", "Status", new { sortOrder = Model.StatusTypeSort, currentFilter = Model.CurrentFilter })">
                    Status Type
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up @filterByStatusTypeAsce" aria-hidden="true"></i>
                        <i class="fa fa-caret-down @filterByStatusTypeDesc" aria-hidden="true"></i>
                    </span>
                </a>
            </th>
            <th>
                <a href="@Url.Action("Index", "Status", new { sortOrder = Model.StatusNameSort, currentFilter = Model.CurrentFilter })">
                    Status Name
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up @filterByStatusNameAsce" aria-hidden="true"></i>
                        <i class="fa fa-caret-down @filterByStatusNameDesc" aria-hidden="true"></i>
                    </span>
                </a>
            </th>
        </tr>
    </thead>

    @foreach (var item in Model.Statuses)
    {
        <tr class="clickable-row" id="@item.StatusID" data-href="Status/Details/@item.StatusID">
            <td data-title="Status Type" class="first-row">
                @Html.DisplayFor(modelItem => item.StatusTypeName)
            </td>
            <td data-title="Status Name">
                @Html.DisplayFor(modelItem => item.StatusName)
            </td>
        </tr>
    }
</table>

    if (Model.TotalItemCount > NotificationPortal.Repositories.ConstantsRepo.PAGE_SIZE)
    {
        <!-- ========================= pagination ========================= -->
        <!-- hide pagination if only 1 page -->
        @Html.PagedListPager(Model.Statuses, page => Url.Action("Index",
                new { page, sortOrder = Model.CurrentSort, currentFilter = Model.CurrentFilter }))
        }
        <div class="pageinfo-display">
            <p>Displaying @Model.ItemStart - @Model.ItemEnd of @Model.TotalItemCount item(s)</p>
        </div>
    }
    else
    {
        if (Model == null)
        {
        <p>Something went wrong, status database not available.</p>
    }
    else
    {
        <p>There are no result matching search in the database at the moment.</p>
    }
}
<!-- ========================= hidden menu ========================= -->
<div class="hidden-menu">
    <ul>
        <li><a href="Status/Edit/" class="btn btn-sm">Edit</a></li>
        <li><a href="Status/Delete/" class="btn btn-sm">Delete</a></li>
    </ul>
</div>