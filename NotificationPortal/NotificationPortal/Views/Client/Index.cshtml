@model NotificationPortal.ViewModels.ClientIndexVM
@using PagedList.Mvc;

@{
    ViewBag.Title = "Clients";
}

<h1 class="display-4 text-center pb-3">@ViewBag.Title</h1>

<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item active">@ViewBag.Title</li>
</ol>
<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm("Index", "Client", FormMethod.Get, new { @class = "form-inline pb-3" }))
        {
            @Html.TextBox("SearchString", Model.CurrentFilter, new { @class = "form-control mr-sm-2" })
            <input class="btn btn-secondary" type="submit" value="Search" />
        }
    </div>
    <div class="offset-md-4 col-md-2">
        <div class="float-create">
            @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-mint text-white" })
        </div>
    </div>
</div>
@if (Model.Clients.Count() > 0)
{
    if (TempData["SuccessMsg"] != null)
    {
        <p class="alert alert-success">
            @Html.Raw(TempData["SuccessMsg"])
        </p>
    }

    <table class="table table-bordered" style="position:relative;">
        @{ 
            var filterByStatusAsce = "";
            var filterByStatusDesc = "";
            var filterByClientAsce = "";
            var filterByClientDesc = "";

            if (Model.CurrentSort != null) {
                filterByStatusAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_ASCE) ? "active-arrow" : "disabled-arrow";
                filterByStatusDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_DESC) ? "active-arrow" : "disabled-arrow";
                filterByClientAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_CLIENT_BY_NAME_ASCE) ? "active-arrow" : "disabled-arrow";
                filterByClientDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_CLIENT_BY_NAME_DESC) ? "active-arrow" : "disabled-arrow";
            }
        }
        <tr class="bg-inverse text-white">
            <th>
                <a href="@Url.Action("Index", "Client", new { sortOrder = Model.ClientHeadingSort, currentFilter = Model.CurrentFilter })">
                    Client
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up @filterByClientAsce" aria-hidden="true"></i>
                        <i class="fa fa-caret-down @filterByClientDesc" aria-hidden="true"></i>
                    </span>
                </a>
            </th>
            <th>
                <a href="@Url.Action("Index", "Client", new { sortOrder = Model.StatusSort, currentFilter = Model.CurrentFilter })">
                    Status
                    <span class="filter-arrows">
                        <i class="fa fa-caret-up @filterByStatusAsce" aria-hidden="true"></i>
                        <i class="fa fa-caret-down @filterByStatusDesc" aria-hidden="true"></i>
                    </span>
                </a>
            </th>
            <th>
                Number of Applications
            </th>
        </tr>

        @foreach (var item in Model.Clients)
        {
            var statusClass = item.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_DISABLED.ToUpper() ? "badge badge-danger" : "badge badge-success";
            var statusIcon = item.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_ENABLED.ToUpper() ? "<i class='fa fa-check text-success' aria-hidden='true'></i>" : "<i class='fa fa-times text-danger' aria-hidden='true'></i>";
            <tr class="clickable-row" id="@item.ReferenceID" data-href="Client/Details/@item.ReferenceID">
                <td>
                    @Html.DisplayFor(modelItem => item.ClientName)
                </td>
                <td>
                    <span>@Html.Raw(statusIcon)</span>
                    <span class="@statusClass">
                        @Html.DisplayFor(modelItem => item.StatusName)
                    </span>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NumOfApps)
                </td>
            </tr>
        }
    </table>

    @Html.PagedListPager(Model.Clients, page => Url.Action("Index",
        new { page, sortOrder = Model.CurrentSort, currentFilter = Model.CurrentFilter }))
    <div class="pageinfo-display">
        <p>Displaying @Model.ItemStart - @Model.ItemEnd of @Model.TotalItemCount item(s)</p>
    </div>
}
else
{
    if (Model == null)
    {
        <p> Something went wrong, client database not available.</p>
    }
    else
    {
        <p> There are no such clients in the database at the moment.</p>
    }

}

<div class="hidden-menu">
    <ul>
        <li><a href="Client/Edit/" class="btn btn-sm">Edit</a></li>
        <li><a href="Client/Delete/" class="btn btn-sm">Delete</a></li>
    </ul>
</div>

