@model NotificationPortal.ViewModels.ClientIndexVM
@using PagedList.Mvc;

@{
    ViewBag.Title = "Clients";
}

<h1 class="display-4 text-center pb-3">@ViewBag.Title</h1>
<!-- ========================= breadcrumb ========================= -->
<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item active">@ViewBag.Title</li>
</ol>
@if (TempData["SuccessMsg"] != null)
{
            <!-- display success message -->
    <p class="alert alert-success alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["SuccessMsg"])
    </p>
}
@if (TempData["ErrorMsg"] != null)
{
            <!-- display error message -->
    <p class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["ErrorMsg"])
    </p>
}
<!-- ========================= search & create ========================= -->
<div class="row">
    <!-- search input and button -->
    <div class="form-inline col-sm-8 col-xs-12 pb-3">
        @using (Html.BeginForm("Index", "Client", FormMethod.Get, new { @class = "form-inline search pb-3" }))
        {
            @Html.TextBox("SearchString", Model.CurrentFilter, new { @class = "form-control mr-sm-2" })
            <span class="hidden-xs-down">
                <input class="btn btn-secondary" type="submit" value="Search" />
            </span>
            <span class="hidden-sm-up">
                <button id="hidden-search">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
            </span>
        }
    </div>
    <!-- create client button -->
    <div class="offset-sm-2 col-sm-2 col-xs-12">
        <div class="float-create">
            @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-mint text-white" })
        </div>
    </div>
</div>

    
@if (Model.Clients.Count() > 0)
{
    <!-- alert message box -->
    if (TempData["SuccessMsg"] != null)
    {
        <p class="alert alert-success">
            @Html.Raw(TempData["SuccessMsg"])
        </p>
    }

    if (TempData["ErrorMsg"] != null)
    {
        <p class="alert alert-danger">
            @Html.Raw(TempData["ErrorMsg"])
        </p>
    }
    <!-- table for clients -->
    <table class="table table-bordered">
        @{
            var filterByStatusAsce = "";
            var filterByStatusDesc = "";
            var filterByClientAsce = "";
            var filterByClientDesc = "";
            if (Model.CurrentSort != null)
            {
                <!-- class for the arrows:active or disabled -->
                filterByStatusAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_ASCE) ? "active-arrow" : "disabled-arrow";
                filterByStatusDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_DESC) ? "active-arrow" : "disabled-arrow";
                filterByClientAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_CLIENT_BY_NAME_ASCE) ? "active-arrow" : "disabled-arrow";
                filterByClientDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_CLIENT_BY_NAME_DESC) ? "active-arrow" : "disabled-arrow";
            }
        }
        <thead>
            <tr class="bg-inverse text-white">
                <th>
                    <a href="@Url.Action("Index", "Client", new { sortOrder = Model.ClientHeadingSort, currentFilter = Model.CurrentFilter })">
                        Client
                        <span class="filter-arrows">
                            <i class="fa fa-caret-up @filterByClientAsce" aria-hidden="true"></i>
                            <i class="fa fa-caret-down @filterByClientDesc" aria-hidden="true"></i>
                        </span>
                    </a>
                </th>
                <th>
                    <a href="@Url.Action("Index", "Client", new { sortOrder = Model.StatusSort, currentFilter = Model.CurrentFilter })">
                        Status
                        <span class="filter-arrows">
                            <i class="fa fa-caret-up @filterByStatusAsce" aria-hidden="true"></i>
                            <i class="fa fa-caret-down @filterByStatusDesc" aria-hidden="true"></i>
                        </span>
                    </a>
                </th>
                <th>Number of Applications</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Clients)
            {
                <!-- loop for all clients -->
                var statusClass = item.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_DISABLED.ToUpper() ? "badge badge-danger" : "badge badge-success";
                var statusIcon = item.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_ENABLED.ToUpper() ? "<i class='fa fa-check text-success' aria-hidden='true'></i>" : "<i class='fa fa-times text-danger' aria-hidden='true'></i>";
                <tr class="clickable-row" id="@item.ReferenceID" data-href="Client/Details/@item.ReferenceID">
                    <!-- client name-->
                    <td data-title="Client" class="first-row">
                        @Html.DisplayFor(modelItem => item.ClientName)
                    </td>
                    <!-- status -->
                    <td data-title="Status">
                        <span>@Html.Raw(statusIcon)</span>
                        <span class="@statusClass">
                            @Html.DisplayFor(modelItem => item.StatusName)
                        </span>
                    </td>
                    <!-- num of apps -->
                    <td data-title="Number of Apps">
                        @Html.DisplayFor(modelItem => item.NumOfApps)
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <!-- ========================= pagination ========================= -->
    if (Model.TotalItemCount > NotificationPortal.Repositories.ConstantsRepo.PAGE_SIZE)
    {
        <!-- hide pagination if only 1 page -->
        @Html.PagedListPager(Model.Clients, page => Url.Action("Index",
        new { page, sortOrder = Model.CurrentSort, currentFilter = Model.CurrentFilter }))

    }
    <div class="pageinfo-display">
        <p>Displaying @Model.ItemStart - @Model.ItemEnd of @Model.TotalItemCount item(s)</p>
    </div>
}
else
{
    if (Model == null)
    {
        <p>Something went wrong, client database not available.</p>
    }
    else
    {
        <p>There are no result matching search in the database at the moment.</p>
    }
}
<!-- ========================= hidden buttons for right click ========================= -->
<div class="hidden-menu">
    <ul>
        <li><a href="Client/Edit/" class="btn btn-sm">Edit</a></li>
        <li><a href="Client/Delete/" class="btn btn-sm">Delete</a></li>
    </ul>
</div>

