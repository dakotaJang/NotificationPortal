@model NotificationPortal.ViewModels.ClientVM

@{
    ViewBag.Title = "Edit Client";
    var statusClass = Model.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_DISABLED.ToUpper() ? "badge badge-danger" : "badge badge-success";
}

<h1 class="text-center display-4 pb-3">
    @ViewBag.Title - @Html.DisplayFor(model => model.ClientName)
    <span class="@statusClass">
        @Html.DisplayFor(model => model.StatusName)
    </span>
</h1>
<!-- ========================= breadcrumb ========================= -->
<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item"><a href="~/Client/Index" class="link-color">Clients</a></li>
    <li class="breadcrumb-item active">@Html.DisplayFor(model => model.ClientName)</li>
</ol>
@if (TempData["SuccessMsg"] != null)
{
            <!-- display success message -->
    <p class="alert alert-success alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["SuccessMsg"])
    </p>
}
@if (TempData["ErrorMsg"] != null)
{
            <!-- display error message -->
    <p class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @Html.Raw(TempData["ErrorMsg"])
    </p>
}
<!-- ========================= edit form ========================= -->
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal offset-md-3 col-md-6 offset-md-3">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <!-- alert message box -->
        @if (TempData["ErrorMsg"] != null)
        {
            <p class="alert alert-danger">
                @Html.Raw(TempData["ErrorMsg"])
            </p>
        }
        @Html.HiddenFor(model => model.ReferenceID)
        <!-- client name input field -->
        <div class="form-group">
            @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "required" })
            <div >
                @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger float-right" })
            </div>
        </div>
        <!-- status list dropdown select -->
        <div class="form-group">
            @Html.LabelFor(model => model.StatusList, htmlAttributes: new { @class = "required" })
            <div>
                @Html.DropDownListFor(m => m.StatusID, ViewBag.StatusNames as SelectList, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StatusID, "", new { @class = "text-danger float-right" })
            </div>
        </div>
        <!-- submit button -->
        <div class="form-group">
            <div>
                <input type="submit" value="Save" class="btn btn-mint text-white" />
                @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-danger" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
