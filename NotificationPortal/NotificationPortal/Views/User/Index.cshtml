@model NotificationPortal.ViewModels.UserIndexVM
@using PagedList.Mvc;

@{
    ViewBag.Title = "User Control";
}

<!-- ========================= title ========================= -->
<h1 class="display-4 text-center pb-3">@ViewBag.Title</h1>

<!-- ========================= breadcrumb ========================= -->
<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item active">@ViewBag.Title</li>
</ol>

<!-- ========================= search & create ========================= -->
<div class="row">
    <!-- Search input and button -->
    <div class="form-inline col-sm-8 col-xs-12 pb-3">
        @using (Html.BeginForm("Index", "User", FormMethod.Get, new { @class = "form-inline search pb-3" }))
        {
            @Html.TextBox("SearchString", Model.CurrentFilter, new { @class = "form-control mr-sm-2" })

            <span class="hidden-xs-down">
                <input class="btn btn-secondary" type="submit" value="Search" />
            </span>

            <span class="hidden-sm-up">
                <button id="hidden-search">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
            </span>
        }
    </div>

    <!-- Create User button -->
    <div class="offset-sm-2 col-sm-2 col-xs-12">
        <div class="float-create">
            @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-mint text-white" })
        </div>
    </div>
</div>

@{  if (Model.Users.Count() > 0)
    {
        // Alert Success message
        if (TempData["SuccessMsg"] != null)
        {
            <p class="alert alert-success">@TempData["SuccessMsg"]</p>
        }

        // Alert Error Message
        if (TempData["ErrorMsg"] != null)
        {
            <p class="alert alert-danger">@TempData["ErrorMsg"]</p>
        }

        <!-- table for users -->
        <table class="table table-bordered">
            @{
                var filterByRoleNameAsce = "";
                var filterByRoleNameDesc = "";
                var filterByEmailAsce = "";
                var filterByEmailDesc = "";
                var filterByFirstNameAsce = "";
                var filterByFirstNameDesc = "";
                var filterByLastNameAsce = "";
                var filterByLastNameDesc = "";
                var filterByClientAsce = "";
                var filterByClientDesc = "";
                var filterByStatusAsce = "";
                var filterByStatusDesc = "";

                if (Model.CurrentSort != null)
                {
                    filterByRoleNameAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_ROLE_NAME_BY_ASCE) ? "active-arrow" : "disabled-arrow";
                    filterByRoleNameDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_ROLE_NAME_BY_DESC) ? "active-arrow" : "disabled-arrow";
                    filterByEmailAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_EMAIL_BY_ASCE) ? "active-arrow" : "disabled-arrow";
                    filterByEmailDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_EMAIL_BY_DESC) ? "active-arrow" : "disabled-arrow";
                    filterByFirstNameAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_FIRST_NAME_BY_ASCE) ? "active-arrow" : "disabled-arrow";
                    filterByFirstNameDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_FIRST_NAME_BY_DESC) ? "active-arrow" : "disabled-arrow";
                    filterByLastNameAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_LAST_NAME_BY_ASCE) ? "active-arrow" : "disabled-arrow";
                    filterByLastNameDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_LAST_NAME_BY_DESC) ? "active-arrow" : "disabled-arrow";
                    filterByClientAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_CLIENT_BY_NAME_ASCE) ? "active-arrow" : "disabled-arrow";
                    filterByClientDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_CLIENT_BY_NAME_DESC) ? "active-arrow" : "disabled-arrow";
                    filterByStatusAsce = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_ASCE) ? "active-arrow" : "disabled-arrow";
                    filterByStatusDesc = Model.CurrentSort.Contains(NotificationPortal.Repositories.ConstantsRepo.SORT_STATUS_BY_NAME_DESC) ? "active-arrow" : "disabled-arrow";
                }
            }

            <thead>
                <tr class="bg-inverse text-white">
                    <th>
                        <a href="@Url.Action("Index", "User", new { sortOrder = Model.RoleNameSort, currentFilter = Model.CurrentFilter })">
                            Role
                            <span class="filter-arrows">
                                <i class="fa fa-caret-up @filterByRoleNameAsce" aria-hidden="true"></i>
                                <i class="fa fa-caret-down @filterByRoleNameDesc" aria-hidden="true"></i>
                            </span>
                        </a>
                    </th>
                    <th>
                        <a href="@Url.Action("Index", "User", new { sortOrder = Model.EmailSort, currentFilter = Model.CurrentFilter })">
                            Email
                            <span class="filter-arrows">
                                <i class="fa fa-caret-up @filterByEmailAsce" aria-hidden="true"></i>
                                <i class="fa fa-caret-down @filterByEmailDesc" aria-hidden="true"></i>
                            </span>
                        </a>
                    </th>
                    <th>
                        <a href="@Url.Action("Index", "User", new { sortOrder = Model.FirstNameSort, currentFilter = Model.CurrentFilter })">
                            First Name
                            <span class="filter-arrows">
                                <i class="fa fa-caret-up @filterByFirstNameAsce" aria-hidden="true"></i>
                                <i class="fa fa-caret-down @filterByFirstNameDesc" aria-hidden="true"></i>
                            </span>
                        </a>
                    </th>
                    <th>
                        <a href="@Url.Action("Index", "User", new { sortOrder = Model.LastNameSort, currentFilter = Model.CurrentFilter })">
                            Last Name
                            <span class="filter-arrows">
                                <i class="fa fa-caret-up @filterByLastNameAsce" aria-hidden="true"></i>
                                <i class="fa fa-caret-down @filterByLastNameDesc" aria-hidden="true"></i>
                            </span>
                        </a>
                    </th>
                    <th>
                        <a href="@Url.Action("Index", "User", new { sortOrder = Model.ClientHeadingSort, currentFilter = Model.CurrentFilter })">
                            Client
                            <span class="filter-arrows">
                                <i class="fa fa-caret-up @filterByClientAsce" aria-hidden="true"></i>
                                <i class="fa fa-caret-down @filterByClientDesc" aria-hidden="true"></i>
                            </span>
                        </a>
                    </th>
                    <th>
                        <a href="@Url.Action("Index", "User", new { sortOrder = Model.StatusSort, currentFilter = Model.CurrentFilter })">
                            Status
                            <span class="filter-arrows">
                                <i class="fa fa-caret-up @filterByStatusAsce" aria-hidden="true"></i>
                                <i class="fa fa-caret-down @filterByStatusDesc" aria-hidden="true"></i>
                            </span>
                        </a>
                    </th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model.Users)
                {
                    var statusClass = item.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_DISABLED.ToUpper() ? "badge badge-danger" : "badge badge-success";
                    var statusIcon = item.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_ENABLED.ToUpper() ? "<i class='fa fa-check text-success' aria-hidden='true'></i>" : "<i class='fa fa-times text-danger' aria-hidden='true'></i>";

                    <tr class="clickable-row" id="@item.ReferenceID" data-href="User/Details/@item.ReferenceID">
                        <td data-title="Role" class="first-row">
                            @Html.DisplayFor(modelItem => item.RoleName)
                        </td>
                        <td data-title="Email">
                             @Html.DisplayTextFor(modelItem => item.Email)
                        </td>
                        <td data-title="First Name">
                            @Html.DisplayFor(modelItem => item.FirstName)
                        </td>
                        <td data-title="Last Name">
                            @Html.DisplayFor(modelItem => item.LastName)
                        </td>
                        <td data-title="Client">
                            @Html.DisplayFor(modelItem => item.ClientName)
                        </td>
                        <td data-title="Status">
                            <span>@Html.Raw(statusIcon)</span>
                            <span class="@statusClass">
                                @Html.DisplayFor(modelItem => item.StatusName)
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- ========================= pagination ========================= -->
            if (Model.TotalItemCount > NotificationPortal.Repositories.ConstantsRepo.PAGE_SIZE)
            {
                <!-- hide pagination if only 1 page -->
                @Html.PagedListPager(Model.Users, page => Url.Action("Index",
                new { page, sortOrder = Model.CurrentSort, currentFilter = Model.CurrentFilter }))
            }

            <div class="pageinfo-display">
                <p>Displaying @Model.ItemStart - @Model.ItemEnd of @Model.TotalItemCount item(s)</p>
            </div>

        }
        else
        {
            if (Model == null)
            {
                <p> Something went wrong, user database not available.</p>
            }
            else
            {
                <p> There are no such users in the database at the moment.</p>
            }
        }
}


<div class="hidden-menu">
    <ul>
        <li><a href="User/Edit/" class="btn btn-sm">Edit</a></li>
        <li><a href="User/Delete/" class="btn btn-sm">Delete</a></li>
    </ul>
</div>
