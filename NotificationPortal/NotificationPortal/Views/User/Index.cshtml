@model NotificationPortal.ViewModels.UserIndexVM
@using PagedList.Mvc;

@{
    ViewBag.Title = "User Management";
}

<h1 class="display-4 text-center pb-3">@ViewBag.Title</h1>

<ol class="breadcrumb bg-faded">
    <li class="breadcrumb-item"><a href="~/Dashboard/Index" class="link-color">Dashboard</a></li>
    <li class="breadcrumb-item active">@ViewBag.Title</li>
</ol>

<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm("Index", "User", FormMethod.Get, new { @class = "form-inline pb-3" }))
        {
            @Html.TextBox("SearchString", Model.CurrentFilter, new { @class = "form-control mr-sm-2" })
            <input class="btn btn-secondary" type="submit" value="Search" />
        }
    </div>
    <div class="offset-md-4 col-md-2">
        <div class="float-create">
            @Html.ActionLink("Create New", "Add", null, new { @class = "btn btn-mint text-white" })
        </div>
    </div>
</div>

@{  if (Model.Users.Count() > 0)
    {
        if (TempData["SuccessMsg"] != null)
        {
            <p class="alert alert-success">@TempData["SuccessMsg"]</p>
        }

        <table class="table table-bordered">
            @{
                var filterByRoleName = "";
                var filterByEmail = "";
                var filterByFirstName = "";
                var filterByLastName = "";
                var filterByClient = "";
                var filterByStatus = "";
                if (Model.CurrentSort != null)
                {
                    filterByRoleName = Model.CurrentSort.Contains("role") ? "bg-mint" : "";
                    filterByEmail = Model.CurrentSort.Contains("email") ? "bg-mint" : "";
                    filterByFirstName = Model.CurrentSort.Contains("first") ? "bg-mint" : "";
                    filterByLastName = Model.CurrentSort.Contains("last") ? "bg-mint" : "";
                    filterByClient = Model.CurrentSort.Contains("client") ? "bg-mint" : "";
                    filterByStatus = Model.CurrentSort.Contains("status") ? "bg-mint" : "";
                }
            }
            <tr class="bg-inverse text-white text-center">
                <th class="@filterByRoleName">
                    <a href="@Url.Action("Index", "User", new { sortOrder = Model.RoleNameSort, currentFilter = Model.CurrentFilter })">
                        Role
                        <span class="filter-arrows">
                            <i class="fa fa-caret-up" aria-hidden="true"></i>
                            <i class="fa fa-caret-down" aria-hidden="true"></i>
                        </span>
                    </a>
                </th>
                <th class="@filterByEmail">
                    <a href="@Url.Action("Index", "User", new { sortOrder = Model.EmailSort, currentFilter = Model.CurrentFilter })">
                        Email
                        <span class="filter-arrows">
                            <i class="fa fa-caret-up" aria-hidden="true"></i>
                            <i class="fa fa-caret-down" aria-hidden="true"></i>
                        </span>
                    </a>
                </th>
                <th class="@filterByFirstName">
                    <a href="@Url.Action("Index", "User", new { sortOrder = Model.FirstNameSort, currentFilter = Model.CurrentFilter })">
                        First Name
                        <span class="filter-arrows">
                            <i class="fa fa-caret-up" aria-hidden="true"></i>
                            <i class="fa fa-caret-down" aria-hidden="true"></i>
                        </span>
                    </a>
                </th>
                <th class="@filterByLastName">
                    <a href="@Url.Action("Index", "User", new { sortOrder = Model.LastNameSort, currentFilter = Model.CurrentFilter })">
                        Last Name
                        <span class="filter-arrows">
                            <i class="fa fa-caret-up" aria-hidden="true"></i>
                            <i class="fa fa-caret-down" aria-hidden="true"></i>
                        </span>
                    </a>
                </th>
                <th class="@filterByClient">
                    <a href="@Url.Action("Index", "User", new { sortOrder = Model.ClientHeadingSort, currentFilter = Model.CurrentFilter })">
                        Client
                        <span class="filter-arrows">
                            <i class="fa fa-caret-up" aria-hidden="true"></i>
                            <i class="fa fa-caret-down" aria-hidden="true"></i>
                        </span>
                    </a>
                </th>
                <th class="@filterByStatus">
                    <a href="@Url.Action("Index", "User", new { sortOrder = Model.StatusSort, currentFilter = Model.CurrentFilter })">
                        Status
                        <span class="filter-arrows">
                            <i class="fa fa-caret-up" aria-hidden="true"></i>
                            <i class="fa fa-caret-down" aria-hidden="true"></i>
                        </span>
                    </a>
                </th>
            </tr>

            @foreach (var item in Model.Users)
            {
                var statusClass = item.StatusName.ToUpper() == NotificationPortal.Models.Key.STATUS_CLIENT_ENABLED.ToUpper() ? "<i class='fa fa-check text-success' aria-hidden='true'></i>" : "<i class='fa fa-times text-danger' aria-hidden='true'></i>";

                <tr class="clickable-row" id="@item.ReferenceID" data-href="User/Details/@item.ReferenceID">
                    <td>
                        @Html.DisplayFor(modelItem => item.RoleName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ClientName)
                    </td>
                    @{
                        var className = item.StatusName == "Disabled" ? "badge badge-danger" : "badge badge-success";
                    }
                    <td>
                        <span>@Html.Raw(statusClass)</span>
                        <span class="@className">@Html.DisplayFor(modelItem => item.StatusName)</span>
                    </td>
                </tr>
            }
        </table>
            
        @Html.PagedListPager(Model.Users, page => Url.Action("Index", new { page, sortOrder = Model.CurrentSort, currentFilter = Model.CurrentFilter }))

        <div class="pageinfo-display">
            <p>Displaying @Model.ItemStart - @Model.ItemEnd of @Model.TotalItemCount item(s)</p>
        </div>                   
    }
    else
    {
        if (Model == null)
        {
            <p> Something went wrong, user database not available.</p>
        }
        else
        {
            <p> There are no such users in the database at the moment.</p>
        }
    }
}


<div class="hidden-menu">
    <ul>
        <li><a href="User/Edit/" class="btn btn-sm">Edit</a></li>
        <li><a href="User/Delete/" class="btn btn-sm">Delete</a></li>
    </ul>
</div>
